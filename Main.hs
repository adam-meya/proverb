{-# LANGUAGE ScopedTypeVariables #-}

import Data.List (foldl')
import Data.Maybe (fromJust)
import Paths_proverb (getDataFileName) -- generated by Cabal
import System.Random (RandomGen, getStdGen, randomRs)

-- prints a random line from proverbs.txt
main :: IO ()
main = do
	input <- getDataFileName "proverbs.txt" >>= readFile
	gen <- getStdGen
	putStrLn $ fromJust $ roulette (lines input) gen

-- picks random item from the list
roulette :: RandomGen g => [a] -> g -> Maybe a
roulette [] _ = Nothing
roulette (item:items) gen =
	Just $ snd $ foldl' roulette' (2, item) itemsWithRolls
	where
		itemsWithRolls = zip items ((randomRs (0, 1) gen) :: [Float])
		roulette' (depth, chosenItem) (item, roll) =
			(depth + 1, if roll < 1 / (fromIntegral depth) then item else chosenItem)
